AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for Agricultural Products App using AWS Free Tier services."

Resources:
  # ✅ Amazon Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: AgriculturalAppUserPool
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AgriculturalAppClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false

  # ✅ AWS AppSync (GraphQL API) for Backend Queries
  GraphQLAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: AgriculturalProductsAPI
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref "AWS::Region"
        DefaultAction: ALLOW

  # ✅ Amazon S3 Bucket for Product Images
  ProductImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "agri-products-bucket-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  # ✅ AWS Lambda Function for Backend Logic (Processing Orders)
  OrderProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessingFunction
      Runtime: python3.8
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "body": json.dumps("Order Processed Successfully!")
              }
      Role: !GetAtt LambdaExecutionRole.Arn

  # ✅ Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${ProductImagesBucket}/*"

  # ✅ Amazon SNS for Order Notifications
  OrderNotifications:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Order Notifications"
      TopicName: "AgriculturalOrdersTopic"

  # ✅ AWS Amplify App for Frontend Hosting
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: AgriculturalProductsApp
      Repository: "https://github.com/your-repo/agri-app"
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      BuildSpec: |
        version: 1
        frontend:
          phases:
            build:
              commands:
                - npm install
                - npm run build
          artifacts:
            baseDirectory: public
            files:
              - '**/*'

  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmplifyExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole

  # ✅ AWS CodeDeploy for CI/CD Deployment with AppDeploy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: AgriAppDeployment
      ComputePlatform: Server

  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: AgriAppDeployGroup
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: "*"

Outputs:
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool

  S3BucketName:
    Description: "S3 Bucket for storing product images"
    Value: !Ref ProductImagesBucket

  LambdaFunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt OrderProcessingLambda.Arn

  SNSOrderTopic:
    Description: "SNS Topic for Order Notifications"
    Value: !Ref OrderNotifications

  GraphQLAPIEndpoint:
    Description: "AppSync GraphQL API Endpoint"
    Value: !GetAtt GraphQLAPI.GraphQLUrl

  AmplifyAppUrl:
    Description: "Amplify App URL"
    Value: !Sub "https://${AmplifyApp}.amplifyapp.com"
